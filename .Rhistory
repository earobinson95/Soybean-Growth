(a + ap*Genotype_P)/(1+(b)*exp(-(c)*Days)) -
(phi*(a + ap*lag(Genotype_P))/(1+(b)*exp(-(c)*lag(Days)))),
data = soybean_data2[-1,],
start = list(a = 16, ap = 4.78, b = 700, c = 0.125, phi = 0.3))
wfct <- function(expr)
{
expr <- deparse(substitute(expr))
## create new environment
newEnv <- new.env()
## get call
mc <- sys.calls()[[1]]
mcL <- as.list(mc)
## get data and write to newEnv
DATA <- mcL[["data"]]
DATA <- eval(DATA)
DATA <- as.list(DATA)
NAMES <- names(DATA)
for (i in 1:length(DATA)) assign(NAMES[i], DATA[[i]], envir = newEnv)
## get parameter, response and predictor names
formula <- as.formula(mcL[[2]])
VARS <- all.vars(formula)
RESP <- VARS[1]
RHS <- VARS[-1]
PRED <- match(RHS, names(DATA))
PRED <- names(DATA)[na.omit(PRED)]
## calculate variances for response values if "error" is in expression
## and write to newEnv
if (length(grep("error", expr)) > 0) {
y <- DATA[[RESP]]
x <- DATA[[PRED]]
## test for replication
if (!any(duplicated(x))) stop("No replicates available to calculate error from!")
## calculate error
error <- tapply(y, x, function(e) var(e, na.rm = TRUE))
error <- as.numeric(sqrt(error))
## convert to original repititions
error <- rep(error, as.numeric(table(x)))
assign("error", error, envir = newEnv)
}
## calculate fitted or residual values if "fitted"/"resid" is in expression
## and write to newEnv
if (length(grep("fitted", expr)) > 0 || length(grep("resid", expr)) > 0) {
mc2 <- mc
mc2$weights <- NULL
MODEL <- eval(mc2)
fitted <- fitted(MODEL)
resid <- residuals(MODEL)
assign("fitted", fitted, newEnv)
assign("resid", resid, newEnv)
}
## return evaluation in newEnv: vector of weights
OUT <- eval(parse(text = expr), envir = newEnv)
return(OUT)
}
mod7 <- nls(Leaf_Weight ~ (a + ap*Genotype_P)/(1+(b)*exp(-(c)*Days)),
data = soybean_data2,
start = list(a = 16, ap = 4.78, b = 700, c = 0.125),
weights = wfct(1/fitted^2*0.5))
wfct <- function(expr)
{
expr <- deparse(substitute(expr))
## create new environment
newEnv <- new.env()
## get call
mc <- sys.calls()[[1]]
mcL <- as.list(mc)
## get data and write to newEnv
DATA <- mcL[["data"]]
DATA <- eval(DATA)
DATA <- as.list(DATA)
NAMES <- names(DATA)
for (i in 1:length(DATA)) assign(NAMES[i], DATA[[i]], envir = newEnv)
## get parameter, response and predictor names
formula <- as.formula(mcL[[2]])
VARS <- all.vars(formula)
RESP <- VARS[1]
RHS <- VARS[-1]
PRED <- match(RHS, names(DATA))
PRED <- names(DATA)[na.omit(PRED)]
## calculate variances for response values if "error" is in expression
## and write to newEnv
if (length(grep("error", expr)) > 0) {
y <- DATA[[RESP]]
x <- DATA[[PRED]]
## test for replication
if (!any(duplicated(x))) stop("No replicates available to calculate error from!")
## calculate error
error <- tapply(y, x, function(e) var(e, na.rm = TRUE))
error <- as.numeric(sqrt(error))
## convert to original repititions
error <- rep(error, as.numeric(table(x)))
assign("error", error, envir = newEnv)
}
## calculate fitted or residual values if "fitted"/"resid" is in expression
## and write to newEnv
if (length(grep("fitted", expr)) > 0 || length(grep("resid", expr)) > 0) {
mc2 <- mc
mc2$weights <- NULL
MODEL <- eval(mc2)
fitted <- fitted(MODEL)
resid <- residuals(MODEL)
assign("fitted", fitted, newEnv)
assign("resid", resid, newEnv)
}
## return evaluation in newEnv: vector of weights
OUT <- eval(parse(text = expr), envir = newEnv)
return(OUT)
}
mod7 <- nls(Leaf_Weight ~ (a + ap*Genotype_P)/(1+(b)*exp(-(c)*Days)),
data = soybean_data2,
start = list(a = 16, ap = 4.78, b = 700, c = 0.125),
weights = wfct(1/fitted^2*0.5))
kable(round(summary(mod7)$coeff[,1:2],3), caption = "Estimated parameters for Model (7)")
resid_panel(data = soybean_data2, yhat = fitted(mod7), observed = soybean_data2$Leaf_Weight)
wfct <- function(expr)
{
expr <- deparse(substitute(expr))
## create new environment
newEnv <- new.env()
## get call
mc <- sys.calls()[[1]]
mcL <- as.list(mc)
## get data and write to newEnv
DATA <- mcL[["data"]]
DATA <- eval(DATA)
DATA <- as.list(DATA)
NAMES <- names(DATA)
for (i in 1:length(DATA)) assign(NAMES[i], DATA[[i]], envir = newEnv)
## get parameter, response and predictor names
formula <- as.formula(mcL[[2]])
VARS <- all.vars(formula)
RESP <- VARS[1]
RHS <- VARS[-1]
PRED <- match(RHS, names(DATA))
PRED <- names(DATA)[na.omit(PRED)]
## calculate variances for response values if "error" is in expression
## and write to newEnv
if (length(grep("error", expr)) > 0) {
y <- DATA[[RESP]]
x <- DATA[[PRED]]
## test for replication
if (!any(duplicated(x))) stop("No replicates available to calculate error from!")
## calculate error
error <- tapply(y, x, function(e) var(e, na.rm = TRUE))
error <- as.numeric(sqrt(error))
## convert to original repititions
error <- rep(error, as.numeric(table(x)))
assign("error", error, envir = newEnv)
}
## calculate fitted or residual values if "fitted"/"resid" is in expression
## and write to newEnv
if (length(grep("fitted", expr)) > 0 || length(grep("resid", expr)) > 0) {
mc2 <- mc
mc2$weights <- NULL
MODEL <- eval(mc2)
fitted <- fitted(MODEL)
resid <- residuals(MODEL)
assign("fitted", fitted, newEnv)
assign("resid", resid, newEnv)
}
## return evaluation in newEnv: vector of weights
OUT <- eval(parse(text = expr), envir = newEnv)
return(OUT)
}
phi = 0.5
mod7 <- nls(Leaf_Weight ~ (a + ap*Genotype_P)/(1+(b)*exp(-(c)*Days)),
data = soybean_data2,
start = list(a = 16, ap = 4.78, b = 700, c = 0.125),
weights = wfct(1/fitted^2*phi))
kable(round(summary(mod7)$coeff[,1:2],3), caption = "Estimated parameters for Model (7)")
resid_panel(data = soybean_data2, yhat = fitted(mod7), observed = soybean_data2$Leaf_Weight)
phi = 1
mod7 <- nls(Leaf_Weight ~ (a + ap*Genotype_P)/(1+(b)*exp(-(c)*Days)),
data = soybean_data2,
start = list(a = 16, ap = 4.78, b = 700, c = 0.125),
weights = wfct(1/fitted^2*phi))
kable(round(summary(mod7)$coeff[,1:2],3), caption = "Estimated parameters for Model (7)")
resid_panel(data = soybean_data2, yhat = fitted(mod7), observed = soybean_data2$Leaf_Weight)
phi = 1
mod7 <- nls(Leaf_Weight ~ (a + ap*Genotype_P)/(1+(b)*exp(-(c)*Days)),
data = soybean_data2,
start = list(a = 16, ap = 4.78, b = 700, c = 0.125),
weights = wfct(1/fitted^2*phi))
kable(round(summary(mod7)$coeff[,1:2],3), caption = "Estimated parameters for Model (7)")
phi = 0.5
mod7 <- nls(Leaf_Weight ~ (a + ap*Genotype_P)/(1+(b)*exp(-(c)*Days)),
data = soybean_data2,
start = list(a = 16, ap = 4.78, b = 700, c = 0.125),
weights = wfct(1/fitted^2*phi))
kable(round(summary(mod7)$coeff[,1:2],3), caption = "Estimated parameters for Model (7)")
source("IRWLS.R")
irwls.mod <- IRWLS(y = soybean_data2$Leaf_Weight, x = soybean_data2$Days, func = expression((a + b*soybean_data2$Genotype_P)/(1+c*exp(-d*x))), theta0 = c(16, 4.78, 700, 0.125), maxiter = 20)
irwls.mod$theta
resid_panel(data = soybean_data2, yhat = irwls.mod$yhat, observed = soybean_data2$Leaf_Weight)
ggplot(soybean_data2, aes(x = Days, y = Leaf_Weight, group = Genotype, color = Genotype)) +
geom_point() +
geom_line(aes(y = fitted(irwls.mod), group = Genotype, color = Genotype)) +
theme_minimal() +
xlab("Days after Planting") +
ylab("Average Leaf Weight/Plant (g)")
ggplot(soybean_data2, aes(x = Days, y = Leaf_Weight, group = Genotype, color = Genotype)) +
geom_point() +
geom_line(aes(y = irwls.mod$yhat, group = Genotype, color = Genotype)) +
theme_minimal() +
xlab("Days after Planting") +
ylab("Average Leaf Weight/Plant (g)")
ggplot(soybean_data2, aes(x = Days, y = Leaf_Weight, group = Genotype, color = Genotype)) +
geom_point() +
geom_line(aes(y = irwls.mod$yhat, group = Genotype, color = Genotype)) +
theme_minimal() +
xlab("Days after Planting") +
ylab("Average Leaf Weight/Plant (g)")
resid_panel(data = soybean_data2, yhat = irwls.mod$yhat, observed = soybean_data2$Leaf_Weight)
irwls.mod$theta
ols3p_GLS <- nls(Leaf_Weight ~ (a + ap*Genotype_P)/(1+(b)*exp(-(c)*Days)),
data = soybean_data2,
start = list(a = 16, ap = 4.78, b = 700, c = 0.125),
weights = wfct(1/fitted^2*0.5))
summary(ols3p_GLS)$coeff
irwls.mod <- IRWLS(y = soybean_data2$Leaf_Weight, x = soybean_data2$Days,
func = expression((a + b*soybean_data2$Genotype_P)/(1+c*exp(-d*x))),
theta0 = c(16, 4.78, 700, 0.125),
psi = 1,
tol = 10^{-8},
maxiter = 20)
irwls.mod$theta
ggplot(soybean_data2, aes(x = Days, y = Leaf_Weight, group = Genotype, color = Genotype)) +
geom_point() +
geom_line(aes(y = irwls.mod$yhat, group = Genotype, color = Genotype)) +
theme_minimal() +
xlab("Days after Planting") +
ylab("Average Leaf Weight/Plant (g)")
resid_panel(data = soybean_data2, yhat = irwls.mod$yhat, observed = soybean_data2$Leaf_Weight)
ols3p_GLS <- nls(Leaf_Weight ~ (a + ap*Genotype_P)/(1+(b)*exp(-(c)*Days)),
data = soybean_data2,
start = list(a = 16, ap = 4.78, b = 700, c = 0.125),
weights = wfct(1/fitted^2*1))
summary(ols3p_GLS)$coeff
resid_panel(data = soybean_data2, yhat = fitted(mod7), observed = soybean_data2$Leaf_Weight)
resid_panel(data = soybean_data2, yhat = fitted(mod7), observed = soybean_data2$Leaf_Weight)
soybean_data2$OLS_yhat <- fitted(mod6)
soybean_data3 <- soybean_data2[order(soybean_data2$Days),]
corr_panel(data = soybean_data2, x = soybean_data2$Days, e = soybean_data2$Leaf_Weight-soybean_data2$OLS_yhat)
#fanning out..
#plot(soybean_data3$Days,soybean_data3$Leaf_Weight - soybean_data3$OLS_yhat, xlab = "Days", ylab = "Residuals")
# soybean_data2$OLS_yhat <- fitted(mod6) soybean_data3 <-
# soybean_data2[order(soybean_data2$Days),] corr_panel(data = soybean_data2, x =
# soybean_data2$Days, e = soybean_data2$Leaf_Weight-soybean_data2$OLS_yhat)
summary(mod2)
summary(mod2)$sigma
summary(mod2)$sigma^2
summary(mod1)$sigma^2
mod7 <- nls(Leaf_Weight ~ (a + ap*Genotype_P)/(1+(b)*exp(-(c)*Days)),
data = soybean_data2,
start = list(a = 16, ap = 4.78, b = 700, c = 0.125),
weights = wfct(1/fitted^2*0.5))
kable(round(summary(mod7)$coeff[,1:2],3), caption = "Estimated parameters for Model (7)")
source("IRWLS.R")
irwls.mod <- IRWLS(y = soybean_data2$Leaf_Weight, x = soybean_data2$Days,
func = expression((a + b*soybean_data2$Genotype_P)/(1+c*exp(-d*x))),
theta0 = c(16, 4.78, 700, 0.125),
psi = 1,
tol = 10^{-8},
maxiter = 20)
irwls.mod$theta
source("WLS_function.R")
mod7 <- WLS(y = soybean_data2$Leaf_Weight, x = soybean_data2$Days,
func = expression((a + b*soybean_data2$Genotype_P)/(1+c*exp(-d*x))),
theta0 = c(16, 4.78, 700, 0.125),
psi = 0.5,
tol = 10^{-8},
maxiter = 20)
mod7$theta
mod7$psi
studentized_resid_panel <- function(data = data, yhat = yhat, residual = residual, studentized_residual = studentized_residaul){
plota <- ggplot(data, aes(x = log(yhat), y = residual)) +
geom_point() +
geom_line(aes(y = 0)) +
theme_minimal() +
xlab("Log Predicted") +
ylab("OLS Residuals") +
ggtitle("Plot (a)")
plotb <- ggplot(data, aes(x = log(yhat), y = residual)) +
geom_point() +
geom_line(aes(y = 0)) +
theme_minimal() +
xlab("Log Predicted") +
ylab("Studentized Weighted Residuals") +
ggtitle("Plot (b)")
plotc <- ggplot(data, aes(x = log(yhat), y = (studentized_residual^2)^(1/3))) +
geom_point() +
theme_minimal() +
xlab("Log Predicted Reaction Rate") +
ylab("2/3 root of the Studentized Weighted Residuals") +
ggtitle("Plot (c)")
coef(lm((studentized_residual^2)^(1/3) ~ log(yhat)))
plotd <- ggplot(data, aes(x = log(yhat), y = log(abs(studentized_residual)))) +
geom_point() +
theme_minimal() +
xlab("Log Predicted Reaction Rate") +
ylab("Log Absolute Studentized Weighted Residuals") +
ggtitle("Plot (d)")
coef(lm(log(abs(studentized_residual)) ~ log(yhat)))
grid.arrange(plota, plotb, plotc, plotd, ncol = 2)
}
studentized_resid_panel(data = soybean_data2, yhat = mod7$yhat, residual = mod7$OLS_resid, studentized_residual = mod7$studentized_resid)
ggplot(soybean_data2, aes(x = Days, y = Leaf_Weight, group = Genotype, color = Genotype)) +
geom_point() +
geom_line(aes(y = mod7$yhat, group = Genotype, color = Genotype)) +
theme_minimal() +
xlab("Days after Planting") +
ylab("Average Leaf Weight/Plant (g)")
source("WLS_function.R")
mod7 <- WLS(y = soybean_data2$Leaf_Weight, x = soybean_data2$Days,
func = expression((a + b*soybean_data2$Genotype_P)/(1+c*exp(-d*x))),
theta0 = c(16, 4.78, 700, 0.125),
psi = 0.5,
tol = 10^{-8},
maxiter = 20)
#mod7$psi
kable(mod7$theta)
#mod7$psi
SE_theta <- sqrt(diag(as.numeric(mod7$sigma_sq)/(t(mod7$V)%*%mod7$W%*%mod7$V)))
theta_est <- cbind(mod7$theta, SE_theta)
theta_est
colnames(theta_est) <- c("Estimate", "Std.Error")
kable(theta_est)
kable(round(theta_est),2)
kable(round(theta_est),3)
theta_est <- cbind(round(mod7$theta,3), round(SE_theta),3)
rownames(theta_est) <- c("a", "ap", "b", "c")
colnames(theta_est) <- c("Estimate", "Std.Error")
kable(theta_est)
colnames(theta_est) <- c("Estimate", "Std.Error")
kable(theta_est)
dim(theta_est)
#mod7$psi
SE_theta <- sqrt(diag(as.numeric(mod7$sigma_sq)/(t(mod7$V)%*%mod7$W%*%mod7$V)))
theta_est <- cbind(round(mod7$theta,3), round(SE_theta),3)
rownames(theta_est) <- c("a", "ap", "b", "c")
colnames(theta_est) <- c("Estimate", "Std.Error")
dim(theta_est)
theta_est
theta_est <- cbind(round(mod7$theta,3), round(SE_theta,3))
rownames(theta_est) <- c("a", "ap", "b", "c")
colnames(theta_est) <- c("Estimate", "Std.Error")
kable(theta_est)
studentized_resid_panel(data = soybean_data2, yhat = mod7$yhat, residual = mod7$OLS_resid, studentized_residual = mod7$studentized_resid)
warnings()
kable(as.data.frame(theta_est))
library(knitr)
library(dplyr)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.width=7, fig.height=6, fig.align = "center")
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=50),tidy=TRUE)
resid_panel <- function(data = data, yhat = yhat, observed = y){
require(ggplot2)
require(gridExtra)
e = observed - yhat
resid1 <- ggplot(data, aes(x = yhat, y = e)) +
geom_point() +
geom_line(aes(y = 0)) +
theme_minimal() +
ggtitle("Residual vs Predicted")
resid2 <- ggplot(data, aes(x = observed, y = e)) +
geom_point() +
geom_line(aes(y = 0)) +
theme_minimal() +
ggtitle("Residual vs Observed")
resid3 <- ggplot(data, aes(x = yhat, y = e^2)) +
geom_point() +
theme_minimal() +
ggtitle("Sq. Residual vs Observed")
resid4 <- ggplot(data, aes(x = yhat, y = abs(e))) +
geom_point() +
theme_minimal() +
ggtitle("Abs. Residual vs Observed")
grid.arrange(resid1, resid2, resid3, resid4, ncol = 2)
}
corr_panel <- function(data = data2, x = x, e = e){
require(ggplot2)
require(gridExtra)
corr_1 <- ggplot(data = data, aes(x = x, y = e)) +
geom_point() +
geom_smooth(se = F) +
geom_line(aes(y = 0)) +
theme_minimal() +
ggtitle("Distance vs Residual")
corr_2 <- ggplot(data = data, aes(x = lag(e), y = e)) +
geom_point() +
geom_smooth(se = F) +
geom_line(aes(y = 0)) +
theme_minimal() +
ggtitle(paste("Nth Residual vs (N-1)st Residual: \n Corr = ", round(cor(lag(e)[-1],e[-1]),4))) +
xlab("lag1_e")
corr_2
corr_3 <- ggplot(data = data, aes(x = lag(lag(e)), y = e)) +
geom_point() +
geom_smooth(se = F) +
geom_line(aes(y = 0)) +
theme_minimal() +
ggtitle(paste("Nth Residual vs (N-2)nd Residual: \n Corr = ", round(cor(lag(lag(e))[-c(1:2)],e[-c(1:2)]),4), sep = "")) +
xlab("lag2_e")
corr_4 <- ggplot(data = data, aes(x = lag(lag(lag(e))), y = e)) +
geom_point() +
geom_smooth(se = F) +
geom_line(aes(y = 0)) +
theme_minimal() +
ggtitle(paste("Nth Residual vs (N-3)rd Residual: \n Corr = ", round(cor(lag(lag(lag(e)))[-c(1:3)],e[-c(1:3)]),4), sep = "")) +
xlab("lag3_e")
grid.arrange(corr_1, corr_2, corr_3, corr_4, ncol = 2)
}
studentized_resid_panel <- function(data = data, yhat = yhat, residual = residual, studentized_residual = studentized_residaul){
plota <- ggplot(data, aes(x = log(yhat), y = residual)) +
geom_point() +
geom_line(aes(y = 0)) +
theme_minimal() +
xlab("Log Predicted") +
ylab("OLS Residuals") +
ggtitle("Plot (a)")
plotb <- ggplot(data, aes(x = log(yhat), y = residual)) +
geom_point() +
geom_line(aes(y = 0)) +
theme_minimal() +
xlab("Log Predicted") +
ylab("Studentized Weighted Residuals") +
ggtitle("Plot (b)")
plotc <- ggplot(data, aes(x = log(yhat), y = (studentized_residual^2)^(1/3))) +
geom_point() +
theme_minimal() +
xlab("Log Predicted Reaction Rate") +
ylab("2/3 root of the Studentized Weighted Residuals") +
ggtitle("Plot (c)")
coef(lm((studentized_residual^2)^(1/3) ~ log(yhat)))
plotd <- ggplot(data, aes(x = log(yhat), y = log(abs(studentized_residual)))) +
geom_point() +
theme_minimal() +
xlab("Log Predicted Reaction Rate") +
ylab("Log Absolute Studentized Weighted Residuals") +
ggtitle("Plot (d)")
coef(lm(log(abs(studentized_residual)) ~ log(yhat)))
grid.arrange(plota, plotb, plotc, plotd, ncol = 2)
}
library(ggplot2)
ggplot(soybean_data, aes(x = Days, y = Leaf_Weight, group = Genotype, color = Genotype)) +
geom_point() +
geom_smooth(se = F) +
theme_minimal() +
xlab("Days after Planting") +
ylab("Average Leaf Weight/Plant (g)")
# Take away ap? No
mod4 <- nls(Leaf_Weight ~ (a)/(1+(b+bp*Genotype_P)*exp(-(c+cp*Genotype_P)*Days)),
data = soybean_data2,
start = list(a = 20, b = 1035, bp = -490, c = 0.125, cp = -0.01))
kable(round(anova(mod4, mod3),2), caption = "Extra sum of squares model (4) vs model (3)")
# Take away bp? Yes
mod5 <- nls(Leaf_Weight ~ (a + ap*Genotype_P)/(1+(b)*exp(-(c+cp*Genotype_P)*Days)),
data = soybean_data2,
start = list(a = 16, ap = 4.78, b = 700, c = 0.125, cp = -0.01))
kable(round(anova(mod5, mod3),2), caption = "Extra sum of squares model (5) vs model (3)")
# Take away cp? Yes
mod6 <- nls(Leaf_Weight ~ (a + ap*Genotype_P)/(1+(b)*exp(-(c)*Days)),
data = soybean_data2,
start = list(a = 16, ap = 4.78, b = 700, c = 0.125))
kable(round(anova(mod6, mod5), 2), caption = "Extra sum of squares model (6) vs model (5)")
library(nlme)
logistf <- function(b1,b2,b3,day){
denom <- 1+exp(-b3*(day-b2))
denom2 <- denom*denom
f1 <- b1/denom
qfunc <- f1
return(qfunc)
#  analytical dervivatives
qgrad <- array(0,c(length(day),3),list(NULL,c("b1","b2","b3")))
qgrad[,"b1"] <- (1/denom)
qgrad[,"b2"] <- -(b3*b1*(denom-1)/denom2)
qgrad[,"b3"] <- ((day-b2)*(b1)*(denom-1)/denom2)
attr(qfunc,"gradient") <- qgrad
}
library(nlme)
mod8 <- nlme(weight ~ logistf(b1,b2,b3,Time),
fixed = list(b1 ~ 1, b2 ~ 1, b3 ~ 1),
random = list(b1 ~ 1,b2 ~ 1,b3 ~ 1),
groups = ~ Plot,
weights = varPower(0.5),
data = Soybean,
start = list(fixed = c(20,50,0.125)),
method="ML",verbose=F)
mod8 <- nlme(Leaf_Weight ~ logistf(b1,b2,b3,Time),
fixed = list(b1 ~ 1, b2 ~ 1, b3 ~ 1),
random = list(b1 ~ 1,b2 ~ 1,b3 ~ 1),
groups = ~ Plot,
weights = varPower(0.5),
data = soybean_data,
start = list(fixed = c(20,50,0.125)),
method="ML",verbose=F)
mod8 <- nlme(Leaf_Weight ~ logistf(b1,b2,b3,Days),
fixed = list(b1 ~ 1, b2 ~ 1, b3 ~ 1),
random = list(b1 ~ 1,b2 ~ 1,b3 ~ 1),
groups = ~ Plot,
weights = varPower(0.5),
data = soybean_data,
start = list(fixed = c(20,50,0.125)),
method="ML",verbose=F)
mod8 <- nlme(Leaf_Weight ~ logistf(b1,b2,b3,Days),
fixed = list(b1 ~ 1, b2 ~ 1, b3 ~ 1),
random = list(b1 ~ 1,b2 ~ 1,b3 ~ 1),
groups = ~ Plant_ID,
weights = varPower(0.5),
data = soybean_data,
start = list(fixed = c(20,50,0.125)),
method="ML",verbose=F)
